import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7.9.0/+esm";

import { fetchJSON, renderProjects } from "../global.js";

document.addEventListener("DOMContentLoaded", async () => {
  try {
    const projects = await fetchJSON("../lib/projects.json");
    const projectsContainer = document.querySelector(".projects");
    const projectsTitle = document.querySelector(".projects-title");

    if (projects && projects.length > 0) {
      // Render the projects
      renderProjects(projects, projectsContainer, "h2");

      // Update the projects count in the title
      projectsTitle.textContent = `(${projects.length}) Projects`;
    } else {
      projectsContainer.innerHTML = "<p>No projects found.</p>";
      projectsTitle.textContent = " (0) Projects";
    }
  } catch (error) {
    console.error("Error loading projects:", error);
    const projectsContainer = document.querySelector(".projects");
    const projectsTitle = document.querySelector(".projects-title");

    projectsContainer.innerHTML =
      "<p>Failed to load projects. Please try again later.</p>";
    projectsTitle.textContent = "(0) Projects";
  }
});

// D3 Pie Chart

// Define your data
let data = [
  { value: 1, label: "apples" },
  { value: 2, label: "oranges" },
  { value: 3, label: "mangos" },
  { value: 4, label: "pears" },
  { value: 5, label: "limes" },
  { value: 5, label: "cherries" },
];

// Create a pie slice generator
let sliceGenerator = d3.pie().value((d) => d.value);

// Generate arc data using the slice generator
let arcData = sliceGenerator(data);

// Define an arc generator
let arcGenerator = d3.arc().innerRadius(0).outerRadius(50);

// Generate the paths for the pie slices
let arcs = arcData.map((d) => arcGenerator(d));

// Define colors for the slices
let colors = d3.scaleOrdinal(d3.schemeTableau10);
let legend = d3.select(".legend");
let svg = d3.select("svg");

arcs.forEach((arc, idx) => {
  svg
    .append("path")
    .attr("d", arc) // Use the path generated by arcGenerator
    .attr("fill", colors(idx)) // Assign a color from the colors array
    .attr("stroke", "white") // Add a stroke for clearer boundaries
    .attr("stroke-width", 1);
});

data.forEach((d, idx) => {
  legend
    .append("li")
    .attr("style", `--color:${colors(idx)}`) // Use inline styles for dynamic colors
    .html(
      `<span class="swatch"></span> ${d.label} <em>(${d.value})</em>` // Display value and label
    );
});
